// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.51
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace CustomLogic
{

    using System.Linq;

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.27.0.0")]
    public class FakeAOMContext : IAOMContext
    {
        public System.Data.Entity.DbSet<AomFieldMeta> AomFieldMetas { get; set; }
        public System.Data.Entity.DbSet<AomFieldObject> AomFieldObjects { get; set; }
        public System.Data.Entity.DbSet<AomMeta> AomMetas { get; set; }
        public System.Data.Entity.DbSet<AomObject> AomObjects { get; set; }
        public System.Data.Entity.DbSet<FieldType> FieldTypes { get; set; }
        public System.Data.Entity.DbSet<RelationshipMeta> RelationshipMetas { get; set; }
        public System.Data.Entity.DbSet<RelationshipObject> RelationshipObjects { get; set; }
        public System.Data.Entity.DbSet<RelationshipType> RelationshipTypes { get; set; }

        public FakeAOMContext()
        {
            AomFieldMetas = new FakeDbSet<AomFieldMeta>("Id");
            AomFieldObjects = new FakeDbSet<AomFieldObject>("Id");
            AomMetas = new FakeDbSet<AomMeta>("Id");
            AomObjects = new FakeDbSet<AomObject>("Id");
            FieldTypes = new FakeDbSet<FieldType>("Id");
            RelationshipMetas = new FakeDbSet<RelationshipMeta>("Id");
            RelationshipObjects = new FakeDbSet<RelationshipObject>("Id");
            RelationshipTypes = new FakeDbSet<RelationshipType>("Id");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        public System.Data.Entity.Database Database { get; }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }

    }
}
// </auto-generated>
